{"version":3,"sources":["lib/RenderObject.ts","lib/RenderContext.ts","lib/RenderManager.ts","lib/components/Canvas.tsx","lib/components/Rect.tsx","lib/utils.ts","components/Input.tsx","components/CreateRectModal.tsx","Controls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RenderObjectTypes","RenderContext","createContext","RenderManager","ctx","objects","this","object","index","findIndex","id","push","draw","eventName","event","nativeEvent","offsetX","offsetY","i","length","eventHandler","events","path","pointInPath","isPointInPath","pointInStroke","isPointInStroke","type","eventType","clear","resetStyle","strokeStyle","fillStyle","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","clearRect","canvas","width","height","Canvas","children","canvasRef","useRef","useState","setCtx","renderManager","useMemo","useEffect","current","currentCtx","getContext","rect","getBoundingClientRect","ref","style","onClick","onEvent","onContextMenu","onDoubleClick","onMouseDown","onMouseMove","onMouseUp","onPointerDown","Provider","value","RenderObject","params","Rect","props","x","y","stroke","fill","useContext","ID","nanoid","propName","hasOwnProperty","slice","getEventHandlersFromProps","Path2D","renderObject","RECT","addObject","Input","label","onChange","e","target","rectState","rectReducer","state","action","payload","Error","CreateRectModal","onAddRect","onHide","useReducer","rectDispatch","onChangeRect","className","stopPropagation","onSubmit","preventDefault","String","Number","Controls","onModifyObject","App","setObjects","selectedObjectIndex","selectObject","isVisibleCreateRectModal","setIsVisibleCreateRectModal","undefined","cloneObjects","selectedObject","map","o","canvasObject","console","log","onSelect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdf8531d.chunk.js","sourcesContent":["import {Events, Params} from \"./Types\";\n\nexport interface IRenderObject {\n    id: string;\n    type: RenderObjectTypes,\n    draw: (ctx: CanvasRenderingContext2D) => void;\n    path: Path2D;\n    events: Events;\n    params: Params;\n}\n\nexport enum RenderObjectTypes {\n    TEXT = \"TEXT\",\n    ARC = \"ARC\",\n    RECT = \"RECT\",\n    LINE = \"LINE\"\n}\n\nexport class RenderObject implements IRenderObject {\n    id: string;\n    type: RenderObjectTypes;\n    draw: (ctx: CanvasRenderingContext2D) => void;\n    path: Path2D;\n    events: Events;\n    params: Params;\n\n    constructor(\n        id: string,\n        type: RenderObjectTypes,\n        draw: (ctx: CanvasRenderingContext2D) => void,\n        path: Path2D,\n        events: Events,\n        params: Params\n    ) {\n        this.id = id;\n        this.type = type;\n        this.draw = draw;\n        this.path = path;\n        this.events = events;\n        this.params = params;\n    }\n}","import {createContext} from \"react\";\n\nimport {IRenderManager} from \"./RenderManager\";\n\nexport const RenderContext = createContext<IRenderManager | null>(null);","import {IRenderObject} from \"./RenderObject\";\nimport {EventName, Event} from \"./Types\";\n\nexport interface IRenderManager {\n    addObject: (pipe: IRenderObject) => void;\n    onEvent: (eventName: EventName) => (event: Event) => void;\n}\n\nexport class RenderManager implements IRenderManager {\n    private readonly ctx: CanvasRenderingContext2D;\n    private readonly objects: Array<IRenderObject>;\n\n    constructor(ctx: CanvasRenderingContext2D) {\n        this.ctx = ctx;\n        this.objects = [];\n    }\n\n    addObject(object: IRenderObject) {\n        const NON_EXIST_INDEX = -1;\n        const index = this.objects.findIndex(({id}) => id === object.id);\n        if (index === NON_EXIST_INDEX) {\n            this.objects.push(object);\n        } else {\n            this.objects[index] = object;\n        }\n        this.draw();\n    }\n\n    onEvent(eventName: EventName) {\n        return (event: Event) => {\n            const {\n                offsetX,\n                offsetY\n            } = event.nativeEvent;\n            for (let i = 0; i < this.objects.length; i++) {\n                const object = this.objects[i];\n                const eventHandler = object.events[eventName];\n                if (object.path && eventHandler) {\n                    const pointInPath = this.ctx.isPointInPath(object.path, offsetX, offsetY);\n                    const pointInStroke = this.ctx.isPointInStroke(object.path, offsetX, offsetY);\n                    if (pointInPath || pointInStroke) {\n                        eventHandler({\n                            id: object.id,\n                            type: object.type,\n                            eventType: eventName,\n                            event\n                        });\n                    }\n                }\n            }\n        };\n    }\n\n    private draw() {\n        this.clear();\n        for (let i = 0; i < this.objects.length; i++) {\n            const object = this.objects[i];\n            this.resetStyle();\n            object.draw(this.ctx);\n        }\n    }\n\n    private resetStyle() {\n        this.ctx.strokeStyle = \"#000\";\n        this.ctx.fillStyle = \"#000\";\n        this.ctx.lineCap = \"butt\";\n        this.ctx.lineDashOffset = 0.0;\n        this.ctx.lineJoin = \"miter\";\n        this.ctx.lineWidth = 1.0;\n        this.ctx.miterLimit = 10.0;\n    }\n\n    private clear() {\n        const X_START = 0;\n        const Y_START = 0;\n        this.ctx.clearRect(X_START, Y_START, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}","import React, {FC, ReactNode, useEffect, useMemo, useRef, useState} from \"react\";\n\nimport {RenderContext} from \"../RenderContext\";\nimport {RenderManager} from \"../RenderManager\";\nimport {Events} from \"../Types\";\n\nexport interface BaseProps extends Events {\n    stroke?: string;\n    fill?: string;\n    lineCap?: CanvasLineCap;\n    lineDashOffset?: number;\n    lineJoin?: CanvasLineJoin;\n    lineWidth?: number;\n    miterLimit?: number;\n}\n\n// eslint-disable-next-line react/prop-types\nconst Canvas: FC = ({children}) => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n    const [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null);\n    const renderManager = useMemo(() => {\n        if (ctx !== null) {\n            return new RenderManager(ctx);\n        }\n        return null;\n    }, [ctx]);\n    useEffect(() => {\n        if (canvasRef.current) {\n            const currentCtx = canvasRef.current.getContext(\"2d\");\n            if (currentCtx) {\n                const rect = canvasRef.current.getBoundingClientRect();\n                canvasRef.current.width = rect.width;\n                canvasRef.current.height = rect.height;\n                setCtx(currentCtx);\n            }\n        }\n    }, []);\n    return (\n        <>\n            <canvas ref={canvasRef}\n                    style={{\n                        width: \"100%\",\n                        height: \"100%\"\n                    }}\n                    // onAuxClick={renderManager?.onEvent(\"onAuxClick\")}\n                    // onAuxClickCapture={renderManager?.onEvent(\"onAuxClickCapture\")}\n                    onClick={renderManager?.onEvent(\"onClick\")}\n                    // onClickCapture={renderManager?.onEvent(\"onClickCapture\")}\n                    onContextMenu={renderManager?.onEvent(\"onContextMenu\")}\n                    // onContextMenuCapture={renderManager?.onEvent(\"onContextMenuCapture\")}\n                    onDoubleClick={renderManager?.onEvent(\"onDoubleClick\")}\n                    // onDoubleClickCapture={renderManager?.onEvent(\"onDoubleClickCapture\")}\n                    onMouseDown={renderManager?.onEvent(\"onMouseDown\")}\n                    // onMouseDownCapture={renderManager?.onEvent(\"onMouseDownCapture\")}\n                    // onMouseEnter={renderManager?.onEvent(\"onMouseEnter\")}\n                    // onMouseLeave={renderManager?.onEvent(\"onMouseLeave\")}\n                    onMouseMove={renderManager?.onEvent(\"onMouseMove\")}\n                    // onMouseMoveCapture={renderManager?.onEvent(\"onMouseMoveCapture\")}\n                    // onMouseOut={renderManager?.onEvent(\"onMouseOut\")}\n                    // onMouseOutCapture={renderManager?.onEvent(\"onMouseOutCapture\")}\n                    // onMouseOver={renderManager?.onEvent(\"onMouseOver\")}\n                    // onMouseOverCapture={renderManager?.onEvent(\"onMouseOverCapture\")}\n                    onMouseUp={renderManager?.onEvent(\"onMouseUp\")}\n                    // onMouseUpCapture={renderManager?.onEvent(\"onMouseUpCapture\")}\n                    onPointerDown={renderManager?.onEvent(\"onPointerDown\")}\n                    // onPointerDownCapture={renderManager?.onEvent(\"onPointerDownCapture\")}\n                    // onPointerMove={renderManager?.onEvent(\"onPointerMove\")}\n                    // onPointerMoveCapture={renderManager?.onEvent(\"onPointerMoveCapture\")}\n                    // onPointerUp={renderManager?.onEvent(\"onPointerUp\")}\n                    // onPointerUpCapture={renderManager?.onEvent(\"onPointerUpCapture\")}\n                    // onPointerCancel={renderManager?.onEvent(\"onPointerCancel\")}\n                    // onPointerCancelCapture={renderManager?.onEvent(\"onPointerCancelCapture\")}\n                    // onPointerEnter={renderManager?.onEvent(\"onPointerEnter\")}\n                    // onPointerEnterCapture={renderManager?.onEvent(\"onPointerEnterCapture\")}\n                    // onPointerLeave={renderManager?.onEvent(\"onPointerLeave\")}\n                    // onPointerLeaveCapture={renderManager?.onEvent(\"onPointerLeaveCapture\")}\n                    // onPointerOver={renderManager?.onEvent(\"onPointerOver\")}\n                    // onPointerOverCapture={renderManager?.onEvent(\"onPointerOverCapture\")}\n                    // onPointerOut={renderManager?.onEvent(\"onPointerOut\")}\n                    // onPointerOutCapture={renderManager?.onEvent(\"onPointerOutCapture\")}\n                    // onGotPointerCapture={renderManager?.onEvent(\"onGotPointerCapture\")}\n                    // onGotPointerCaptureCapture={renderManager?.onEvent(\"onGotPointerCaptureCapture\")}\n                    // onLostPointerCapture={renderManager?.onEvent(\"onLostPointerCapture\")}\n                    // onLostPointerCaptureCapture={renderManager?.onEvent(\"onLostPointerCaptureCapture\")}\n            >\n                Извините, ваш браузер нет поддерживает&lt;canvas&gt; элемент.\n            </canvas>\n            {ctx ? <RenderContext.Provider value={renderManager}>{children}</RenderContext.Provider> : null}\n        </>\n    );\n};\n\nexport default Canvas;","import {FC, useContext, useEffect, useRef} from \"react\";\nimport {nanoid} from \"nanoid\";\n\nimport {RenderContext} from \"../RenderContext\";\nimport {BaseProps} from \"./Canvas\";\nimport {RenderObject, RenderObjectTypes} from \"../RenderObject\";\nimport {getEventHandlersFromProps} from \"../utils\";\n\nexport interface RectProps extends BaseProps {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nconst Rect: FC<RectProps> = (props) => {\n    const {\n        x,\n        y,\n        width,\n        height,\n        stroke,\n        fill\n    } = props;\n    const renderManager = useContext(RenderContext);\n    const ID = useRef(nanoid());\n    const events = getEventHandlersFromProps<RectProps>(props);\n    useEffect(() => {\n        const path = new Path2D();\n        const params = {\n            x,\n            y,\n            width,\n            height,\n            stroke,\n            fill\n        };\n        const draw = (ctx: CanvasRenderingContext2D) => {\n            path.rect(x, y, width, height);\n            if (fill) {\n                ctx.fillStyle = fill;\n                ctx.fill(path);\n            }\n            if (stroke) {\n                ctx.strokeStyle = stroke;\n                ctx.stroke(path);\n            }\n        };\n        const renderObject = new RenderObject(ID.current, RenderObjectTypes.RECT, draw, path, events, params);\n        renderManager!.addObject(renderObject);\n    }, [events, fill, height, renderManager, stroke, width, x, y]);\n    return null;\n};\n\nexport default Rect;","import {Events} from \"./Types\";\n\nexport function getEventHandlersFromProps<T extends object>(props: T) {\n    const events: Events = {};\n    const eventPrefix = \"on\";\n    for (const propName in props) {\n        if (props.hasOwnProperty(propName) && propName.slice(0, 2) === eventPrefix) {\n            //@ts-ignore\n            events[propName] = props[propName];\n        }\n    }\n    return events;\n}","import React, {ChangeEvent, FC} from \"react\";\n\ninterface InputProps {\n    label: string;\n    type: string;\n    value: string;\n    onChange: (value: string) => void\n}\n\nconst Input: FC<InputProps> = ({\n                                   label,\n                                   type,\n                                   value,\n                                   onChange\n                               }) => {\n    const handleChange = (e: ChangeEvent) => onChange((e.target as HTMLInputElement).value);\n    return (\n        <label>\n            <span>{label}</span>\n            <input type={type} value={value} onChange={handleChange}/>\n        </label>\n    );\n};\n\nexport default Input;","import React, {FC, FormEvent, useReducer} from \"react\";\nimport Input from \"./Input\";\n\nexport type RectState = typeof rectState;\ntype Action = { type: string, payload: object };\n\nconst rectState = {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n    stroke: \"\",\n    fill: \"#004cff\"\n};\n\nfunction rectReducer(state: RectState, action: Action) {\n    switch (action.type) {\n        case \"setParams\":\n            return {...state, ...action.payload};\n        default:\n            throw new Error();\n    }\n}\n\ninterface CreateRectModalProps {\n    onAddRect: (rect: RectState) => void;\n    onHide: () => void;\n}\n\nexport const CreateRectModal: FC<CreateRectModalProps> = ({\n                                                              onAddRect,\n                                                              onHide\n                                                          }) => {\n    const [rect, rectDispatch] = useReducer(rectReducer, rectState);\n    const addRect = (e: FormEvent) => {\n        e.preventDefault();\n        onAddRect(rect);\n        onHide();\n    };\n    const onChangeRect = (params: object) => rectDispatch({\n        type: \"setParams\",\n        payload: {...rect, ...params}\n    });\n    const changeX = (x: string) => onChangeRect({x: Number(x)});\n    const changeY = (y: string) => onChangeRect({y: Number(y)});\n    const changeWidth = (width: string) => onChangeRect({width: Number(width)});\n    const changeHeight = (height: string) => onChangeRect({height: Number(height)});\n    const changeStroke = (stroke: string) => onChangeRect({stroke: stroke});\n    const changeFill = (fill: string) => onChangeRect({fill: fill});\n    return (\n        <div className=\"create-rect\" onClick={onHide}>\n            <div className=\"create-rect-modal\" onClick={e => e.stopPropagation()}>\n                <h6>Set Rect Params</h6>\n                <form onSubmit={addRect}>\n                    <Input label=\"x\" type=\"number\" value={String(rect.x)} onChange={changeX}/>\n                    <Input label=\"y\" type=\"number\" value={String(rect.y)} onChange={changeY}/>\n                    <Input label=\"width\" type=\"number\" value={String(rect.width)} onChange={changeWidth}/>\n                    <Input label=\"height\" type=\"number\" value={String(rect.height)} onChange={changeHeight}/>\n                    <Input label=\"stroke\" type=\"color\" value={String(rect.stroke)} onChange={changeStroke}/>\n                    <Input label=\"fill\" type=\"color\" value={String(rect.fill)} onChange={changeFill}/>\n                    <button type=\"submit\">Add Rect</button>\n                </form>\n            </div>\n        </div>\n    );\n};","import React, {FC} from \"react\";\nimport Input from \"./components/Input\";\nimport {RectState} from \"./components/CreateRectModal\";\n\ninterface ControlsProps {\n    object: RectState,\n    onModifyObject: (params: object) => void\n}\n\nconst Controls: FC<ControlsProps> = ({\n                                         object,\n                                         onModifyObject\n                                     }) => {\n    const changeX = (x: string) => onModifyObject({x: Number(x)});\n    const changeY = (y: string) => onModifyObject({y: Number(y)});\n    const changeWidth = (width: string) => onModifyObject({width: Number(width)});\n    const changeHeight = (height: string) => onModifyObject({height: Number(height)});\n    const changeStroke = (stroke: string) => onModifyObject({stroke: stroke});\n    const changeFill = (fill: string) => onModifyObject({fill: fill});\n    return (\n        <div className=\"controls\">\n            <h5>Controls</h5>\n            <form className=\"controls-form\">\n                <Input label=\"x\" type=\"number\" value={String(object.x)} onChange={changeX}/>\n                <Input label=\"y\" type=\"number\" value={String(object.y)} onChange={changeY}/>\n                <Input label=\"width\" type=\"number\" value={String(object.width)} onChange={changeWidth}/>\n                <Input label=\"height\" type=\"number\" value={String(object.height)} onChange={changeHeight}/>\n                <Input label=\"stroke\" type=\"color\" value={object.stroke} onChange={changeStroke}/>\n                <Input label=\"fill\" type=\"color\" value={object.fill} onChange={changeFill}/>\n            </form>\n        </div>\n    );\n};\n\nexport default Controls;","import React, {FC, useEffect, useState} from \"react\";\n\nimport {Canvas, Rect} from \"./lib\";\nimport {CreateRectModal, RectState} from \"./components/CreateRectModal\";\nimport {EventRenderObject} from \"./lib/Types\";\nimport Controls from \"./Controls\";\n\nconst App: FC = () => {\n    const [objects, setObjects] = useState<RectState[]>([]);\n    const [selectedObjectIndex, selectObject] = useState<number>();\n    const [isVisibleCreateRectModal, setIsVisibleCreateRectModal] = useState(false);\n    const onSelect = (index: number, canvasObject: EventRenderObject) => {\n        selectObject(index);\n        console.log(canvasObject);\n    };\n    const onModifyObject = (object: object) => {\n        if (selectedObjectIndex !== undefined) {\n            const cloneObjects = [...objects];\n            const selectedObject = cloneObjects[selectedObjectIndex];\n            cloneObjects[selectedObjectIndex] = {...selectedObject, ...object};\n            setObjects(cloneObjects);\n        }\n    };\n    const onAddRect = (rect: RectState) => {\n        setObjects([...objects, rect]);\n    };\n    useEffect(() => {\n        if (isVisibleCreateRectModal) {\n            selectObject(undefined);\n        }\n    }, [isVisibleCreateRectModal]);\n    return (\n        <div className=\"app\">\n            <h1>React-Canva</h1>\n            <button onClick={() => setIsVisibleCreateRectModal(true)}>Add Rect</button>\n            {isVisibleCreateRectModal && (\n                <CreateRectModal onAddRect={onAddRect} onHide={() => setIsVisibleCreateRectModal(false)}/>\n            )}\n            {selectedObjectIndex !== undefined && (\n                <Controls object={objects[selectedObjectIndex]}\n                          onModifyObject={onModifyObject}/>\n            )}\n            <div className=\"canvas\">\n                <Canvas>\n                    {objects.map((object, index) => {\n                        return (\n                            <Rect x={object.x}\n                                  y={object.y}\n                                  width={object.width}\n                                  height={object.height}\n                                  onClick={o => onSelect(index, o)}\n                                  fill={object.fill}\n                                  stroke={selectedObjectIndex === index ? \"#ff0015\" : \"\"}/>\n                        );\n                    })}\n                </Canvas>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}