{"version":3,"file":"index.js","sources":["../src/Context.ts","../src/DrawPipeline.ts","../src/Canvas.tsx","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.js","../src/Rect.tsx","../src/Text.tsx"],"sourcesContent":[null,null,null,"// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nlet urlAlphabet =\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW'\n\nexport { urlAlphabet }\n","import crypto from 'crypto'\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\n// It is best to make fewer, larger requests to the crypto module to\n// avoid system call overhead. So, random numbers are generated in a\n// pool. The pool is a Buffer that is larger than the initial random\n// request size by this multiplier. The pool is enlarged if subsequent\n// requests exceed the maximum buffer size.\nconst POOL_SIZE_MULTIPLIER = 32\nlet pool, poolOffset\n\nlet random = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  }\n\n  let res = pool.subarray(poolOffset, poolOffset + bytes)\n  poolOffset += bytes\n  return res\n}\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n  let step = Math.ceil((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (let i = 0; i < step; i++)`.\n      let i = step\n      while (i--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let bytes = random(size)\n  let id = ''\n  // A compact alternative for `for (let i = 0; i < size; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n",null,null],"names":["createContext","useRef","useState","useMemo","useEffect","React","crypto","ID","useContext"],"mappings":"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"}